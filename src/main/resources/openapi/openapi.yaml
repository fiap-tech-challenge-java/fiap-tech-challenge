openapi: 3.0.3
info:
  title: FIAP_TC1
  version: 1.0.0
  description: API para gerenciar usuários (dono de restaurante e cliente)
servers:
  - url: http://localhost:8080/api/v1

tags:
  - name: users
    description: Operações relacionadas a usuários
  - name: auth
    description: Operações relacionadas a autenticação
  - name: addresses
    description: Operações relacionadas a endereços de usuários

paths:
  /auth/login:
    post:
      operationId: login
      tags:
        - auth
      summary: Autentica um usuário e retorna um token JWT
      description: > 
        Este endpoint permite que um usuário (dono de restaurante ou cliente) realize login no sistema.
        Se as credenciais forem válidas, um JSON Web Token (JWT) será retornado.
        O token deve ser usado no header Authorization das requisições subsequentes no formato:
        Authorization: Bearer {token}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Usuário autenticado com sucesso e token JWT retornado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Credenciais inválidas fornecidas.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      operationId: getUsers
      tags:
        - users
      summary: Lista todos os usuários
      description: Retorna uma lista de todos os usuários cadastrados no sistema. A lista pode ser vazia se não houver usuários.
      security:
        - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
          description: Lista de usuários retornada com sucesso (pode ser vazia).

    post:
      operationId: createUser
      tags:
        - users
      summary: Cria um novo usuário
      description: Cadastra um novo usuário no sistema, podendo ser um dono de restaurante ou um cliente. Um endereço inicial é obrigatório no momento da criação.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
          description: Usuário criado com sucesso. Retorna os detalhes do usuário recém-criado, incluindo seu ID.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Dados inválidos fornecidos na requisição.

  /users/{id}:
    get:
      operationId: getUser
      tags:
        - users
      summary: Busca um usuário pelo ID
      description: Retorna os detalhes de um usuário específico, utilizando seu ID único.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          schema:
            format: uuid
            type: string
          in: path
          required: true
          description: O ID único do usuário a ser buscado.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Usuário encontrado e seus detalhes retornados com sucesso.
        '404':
          description: Usuário não encontrado para o ID fornecido.

    put:
      operationId: updateUser
      tags:
        - users
      summary: Atualiza um usuário existente
      description: Permite a atualização de informações de um usuário existente, como nome e login.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      parameters:
        - name: id
          schema:
            format: uuid
            type: string
          in: path
          required: true
          description: O ID único do usuário a ser atualizado.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Usuário atualizado com sucesso. Retorna os detalhes atualizados do usuário.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Usuário não encontrado para o ID fornecido.

    delete:
      operationId: deleteUser
      tags:
        - users
      security:
        - bearerAuth: []
      summary: Deleta um usuário existente
      description: Remove um usuário do sistema com base no seu ID. Esta é uma exclusão lógica.
      parameters:
        - name: id
          schema:
            format: uuid
            type: string
          in: path
          required: true
          description: O ID único do usuário a ser deletado.
      responses:
        '204':
          description: Usuário deletado com sucesso. Nenhuma resposta de conteúdo.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Usuário não encontrado para o ID fornecido.

  /users/change-password:
    put:
      tags:
        - users
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      responses:
        '204':
          description: Senha trocada com sucesso. Nenhuma resposta de conteúdo.
      operationId: changePassword
      summary: Troca a senha do usuário.
      description: Permite que um usuário altere sua senha de acesso.

  /users/{userId}/addresses:
    parameters:
      - name: userId
        schema:
          format: uuid
          type: string
        in: path
        required: true
        description: O ID único do usuário.


    get:
      tags:
        - addresses
      security:
        - bearerAuth: [ ]
      operationId: listAddressesByUserId
      summary: Lista todos os endereços de um usuário.
      description: Retorna uma lista de todos os endereços associados a um usuário específico.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AddressResponse'
          description: Lista com sucesso todos os endereços do usuário. Pode retornar uma lista vazia.

    post:
      tags:
        - addresses
      security:
        - bearerAuth: [ ]
      operationId: createAddressForUser
      summary: Cria um novo endereço para um usuário.
      description: Adiciona um novo endereço à lista de endereços de um usuário existente.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAddressRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
          description: Cria com sucesso endereço ao usuário. Retorna os detalhes do endereço recém-criado.

  /users/{userId}/addresses/{addressId}:
    parameters:
      - name: userId
        schema:
          format: uuid
          type: string
        in: path
        required: true
        description: O ID único do usuário proprietário do endereço.
      - name: addressId
        schema:
          format: uuid
          type: string
        in: path
        required: true
        description: O ID único do endereço.


    put:
      tags:
        - addresses
      security:
        - bearerAuth: [ ]
      parameters:
        - name: userId
          schema:
            format: uuid
            type: string
          in: path
          required: true
          description: O ID único do usuário proprietário do endereço.
        - name: addressId
          schema:
            format: uuid
            type: string
          in: path
          required: true
          description: O ID único do endereço.
      operationId: updateAddressForUser
      summary: Atualiza um endereço específico de um usuário.
      description: Permite a atualização dos detalhes de um endereço específico associado a um usuário.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
          description: Endereço atualizado com sucesso. Retorna os detalhes atualizados do endereço.
        '404':
          description: Usuário ou endereço não encontrado.

    delete:
      tags:
        - addresses
      security:
        - bearerAuth: [ ]
      parameters:
        - name: userId
          schema:
            format: uuid
            type: string
          in: path
          required: true
          description: O ID único do usuário proprietário do endereço.
        - name: addressId
          schema:
            format: uuid
            type: string
          in: path
          required: true
          description: O ID único do endereço.
      operationId: deleteAddressForUser
      summary: Deleta logicamente um endereço de um usuário.
      description: Marca um endereço específico como inativo para um determinado usuário, não o removendo fisicamente do banco de dados.
      responses:
        '204':
          description: Endereço deletado com sucesso. Nenhuma resposta de conteúdo.
        '404':
          description: Usuário ou endereço não encontrado.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Insira o token JWT obtido do endpoint /auth/login no formato: Bearer {token}

  schemas:
    ErrorResponse:
      required:
        - message
        - code
        - status
        - path
      type: object
      properties:
        message:
          description: Mensagem de erro detalhada.
          type: string
          example: Dados de entrada inválidos.
        code:
          description: Código interno do erro.
          type: string
          example: INVALID_INPUT
        status:
          description: Código de status HTTP.
          type: integer
          example: 400
        path:
          description: URL da requisição que gerou o erro.
          type: string
          example: /api/v1/users
        fieldErrors:
          description: Mapa de erros de validação específicos do campo, onde a chave é o nome do campo e o valor é a mensagem de erro.
          type: object
          additionalProperties:
            type: string
          example:
            email: O formato do e-mail é inválido.
            password: A senha deve ter no mínimo 8 caracteres.


    AddressUserRequest:
      type: object
      description: Representa os dados de um endereço para requisições.
      properties:
        publicPlace:
          type: string
          description: Nome da rua, avenida, praça, etc.
          example: Rua das Acácias
        number:
          type: string
          description: Número do imóvel.
          example: '456'
        complement:
          type: string
          description: Complemento do endereço (apartamento, bloco, etc.).
          example: Bloco C, Apto 101
        neighborhood:
          type: string
          description: Nome do bairro.
          example: Bela Vista
        city:
          type: string
          description: Nome da cidade.
          example: Belo Horizonte
        state:
          type: string
          description: Sigla do estado (UF).
          example: MG
        postalCode:
          type: string
          description: Código de Endereçamento Postal (CEP).
          example: 30160-010

    ChangePasswordRequest:
      title: Solicitação de Mudança de Senha
      description: Estrutura da requisição para alterar a senha de um usuário.
      type: object
      properties:
        id:
          format: uuid
          type: string
          description: O ID único do usuário cuja senha será alterada.
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        lastPassword:
          type: string
          description: A senha antiga do usuário.
          example: MinhaAntigaSenha123!
        newPassword:
          type: string
          description: A nova senha desejada pelo o usuário.
          example: MinhaNovaSenha123!
        confirmPassword:
          type: string
          description: A confirmação da senha desejada pelo o usuário.
          example: MinhaNovaSenha123!

    UserRole:
      description: Papel do usuário no sistema. Define as permissões e funcionalidades disponíveis.
      enum:
        - OWNER
        - CUSTOMER
      type: string


    CreateAddressRequest:
      title: Solicitação de Criação de Endereço
      description: Estrutura da requisição para criar um novo endereço para um usuário.
      type: object
      properties:
        publicPlace:
          type: string
          description: Nome da rua, avenida, praça, etc.
          example: Rua das Flores
        number:
          type: string
          description: Número do imóvel.
          example: '123'
        complement:
          type: string
          description: Complemento do endereço (apartamento, bloco, etc.).
          example: Apto 45
        neighborhood:
          type: string
          description: Nome do bairro.
          example: Jardim Primavera
        city:
          type: string
          description: Nome da cidade.
          example: São Paulo
        state:
          type: string
          description: Sigla do estado (UF).
          example: SP
        postalCode:
          type: string
          description: Código de Endereçamento Postal (CEP).
          example: 01234-567

    UpdateAddressRequest:
      title: Solicitação de Atualização de Endereço
      description: Estrutura da requisição para atualizar um endereço existente de um usuário.
      type: object
      properties:
        publicPlace:
          type: string
          description: Novo nome da rua, avenida, praça, etc.
          example: Avenida Central
        number:
          type: string
          description: Novo número do imóvel.
          example: '999'
        complement:
          type: string
          description: Novo complemento do endereço (apartamento, bloco, etc.).
          example: Casa
        neighborhood:
          type: string
          description: Novo nome do bairro.
          example: Centro
        city:
          type: string
          description: Nova cidade.
          example: Rio de Janeiro
        state:
          type: string
          description: Nova sigla do estado (UF).
          example: RJ
        postalCode:
          type: string
          description: Novo Código de Endereçamento Postal (CEP).
          example: 98765-432

    AddressResponse:
      title: Resposta de Endereço
      description: Estrutura da resposta contendo os detalhes de um endereço.
      type: object
      properties:
        id:
          format: uuid
          type: string
          description: O ID único do endereço.
          example: b1a7d7a3-2f18-4c91-a10d-9e4a5c0f3b99
        publicPlace:
          type: string
          description: Nome da rua, avenida, praça, etc.
          example: Rua das Flores
        number:
          type: string
          description: Número do imóvel.
          example: '123'
        complement:
          type: string
          description: Complemento do endereço (apartamento, bloco, etc.).
          example: Apto 202
        neighborhood:
          type: string
          description: Nome do bairro.
          example: Jardim Primavera
        city:
          type: string
          description: Nome da cidade.
          example: São Paulo
        state:
          type: string
          description: Sigla do estado (UF).
          example: SP
        postalCode:
          type: string
          description: Código de Endereçamento Postal (CEP).
          example: 01234-567

    CreateUserRequest:
      title: Solicitação de Criação de Usuário
      description: Estrutura da requisição para criar um novo usuário no sistema.
      required:
        - address
        - name
        - email
        - cpf
        - login
        - password
      type: object
      properties:
        name:
          type: string
          description: Nome completo do usuário.
          example: João Silva
          minLength: 1
          maxLength: 100
        email:
          type: string
          description: Endereço de e-mail único do usuário.
          example: joao.silva@example.com
          minLength: 1
          maxLength: 255
        cpf:
          type: string
          description: Cadastro de Pessoa Física (CPF) do usuário. Deve ser único.
          example: '286.084.030-30'
          minLength: 11
          maxLength: 14
        login:
          type: string
          description: Nome de usuário para login. Deve ser único.
          example: joaosilva123
          minLength: 1
          maxLength: 50
        password:
          type: string
          description: Senha do usuário.
          example: MyStrongPassword123!
          minLength: 8
          maxLength: 64
        role:
          type: string
          description: Papel do usuário no sistema (OWNER ou CUSTOMER).
          enum:
            - OWNER
            - CUSTOMER
          example: CUSTOMER
        address:
          $ref: '#/components/schemas/AddressUserRequest'
          description: O endereço principal do usuário no momento do cadastro.

    CreateUserResponse:
      title: Resposta de Criação de Usuário
      description: Estrutura da resposta após a criação bem-sucedida de um usuário.
      type: object
      properties:
        id:
          format: uuid
          type: string
          description: O ID único gerado para o novo usuário.
          example: fdsgasfdg234-sfdgh-39468956-adfg
        name:
          type: string
          description: Nome completo do usuário.
          example: João Silva
        email:
          type: string
          description: Endereço de e-mail do usuário.
          example: joao.silva@example.com
        cpf:
          type: string
          description: CPF do usuário.
          example: '286.084.030-30'
        login:
          type: string
          description: Login do usuário.
          example: joaosilva123
        role:
          type: string
          description: Papel do usuário no sistema (OWNER ou CUSTOMER).
          enum:
            - OWNER
            - CUSTOMER
          example: CUSTOMER
        active:
          type: boolean
          description: Status de ativação do usuário (true se ativo, false se inativo).
          example: true
        createdAt:
          type: string
          description: Criação do usuário
          example: '15/06/2025 19:40'
        updatedAt:
          type: string
          description: Última atualização do usuário
          example: '16/06/2025 19:40'
        address:
          type: array
          items:
            $ref: '#/components/schemas/AddressResponse'
          description: Uma lista dos endereços associados ao usuário.

    LoginResponse:
      title: Resposta de Login
      description: Estrutura da resposta do endpoint de login, incluindo informações de autenticação e token
      required:
        - token
        - login
        - email
        - expiresAt
        - expiresIn
        - userId
      type: object
      properties:
        token:
          type: string
          description: Token JWT para autenticação
          example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjg5MjY4MDUwLCJleHAiOjE2ODkyNzA0NTB9.X
        login:
          type: string
          description: Login do usuário
          example: joaosilva123
        email:
          type: string
          description: Email do usuário
          example: joao.silva@example.com
        expiresAt:
          type: string
          format: date-time
          description: Data e hora de expiração do token
          example: '2025-07-10T23:09:24-03:00'
        expiresIn:
          type: integer
          format: int32
          description: Tempo restante até a expiração do token em segundos
          example: 3600
        userId:
          type: string
          format: uuid
          description: ID único do usuário
          example: 123e4567-e89b-12d3-a456-426614174000

    UserResponse:
      title: Resposta de Detalhes do Usuário
      description: Estrutura da resposta contendo os detalhes completos de um usuário.
      type: object
      properties:
        id:
          format: uuid
          type: string
          description: O ID único do usuário.
          example: fdsgasfdg234-sfdgh-39468956-adfg
        name:
          type: string
          description: Nome completo do usuário.
          example: João Silva
        email:
          type: string
          description: Endereço de e-mail do usuário.
          example: joao.silva@example.com
        cpf:
          type: string
          description: CPF do usuário.
          example: '286.084.030-30'
        login:
          type: string
          description: Login do usuário.
          example: joaosilva123
        role:
          type: string
          description: Papel do usuário no sistema (OWNER ou CUSTOMER).
          enum:
            - OWNER
            - CUSTOMER
          example: CUSTOMER
        active:
          description: Indica se o usuário está ativo no sistema (true para ativo, false para inativo).
          type: boolean
          example: true
        createdAt:
          type: string
          description: Criação do usuário
          example: '15/06/2025 19:40'
        updatedAt:
          type: string
          description: Última atualização do usuário
          example: '16/06/2025 19:40'
        address:
          type: array
          items:
            $ref: '#/components/schemas/AddressResponse'
          description: Uma lista dos endereços associados ao usuário.

    UpdateUserRequest:
      title: Solicitação de Atualização de Usuário
      description: Estrutura da requisição para atualizar informações de um usuário existente.
      type: object
      properties:
        name:
          type: string
          description: Novo nome completo do usuário.
          example: Larissa Fiap Santos
        login:
          type: string
          description: Novo login do usuário.
          example: LarissaLuana
        email:
          type: string
          description: Novo email do usuário.
          example: larissa@email.com

    LoginRequest:
      type: object
      description: Estrutura da requisição para autenticação de um usuário.
      required:
        - login
        - password
      properties:
        login:
          type: string
          description: O login do usuário cadastrado.
          example: joaosilva123
        password:
          type: string
          format: password
          example: MyStrongPassword123!
          description: A senha do usuário.