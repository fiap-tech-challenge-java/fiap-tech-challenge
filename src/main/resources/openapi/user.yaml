openapi: 3.0.3
info:
  title: User API
  version: 1.0.0
  description: API para gerenciar usuários (dono de restaurante e cliente)

servers:
  - url: http://localhost:8080/api/v1

tags:
  - name: User
    description: Operações relacionadas a usuários

paths:
  /users:
    get:
      operationId: getUsers
      tags:
        - User
      summary: Lista todos os usuários
      responses:
        '200':
          description: Lista de usuários retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'

    post:
      operationId: createUser
      tags:
        - User
      summary: Cria um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /users/{id}:
    get:
      operationId: getUser
      tags:
        - User
      summary: Busca um usuário pelo ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Usuário encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: Usuário não encontrado

    put:
      operationId: updateUser
      tags:
        - User
      summary: Atualiza um usuário existente
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: Usuário atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: Usuário não encontrado

    delete:
      operationId: deleteUser
      tags:
        - User
      summary: Deleta um usuário existente
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Usuário deletado com sucesso
        '404':
          description: Usuário não encontrado

components:
  schemas:
    UserRequest:
      type: object
      required:
        - name
        - email
        - login
        - password
        - address
        - role
        - active
      properties:
        name:
          type: string
          example: João Silva
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          example: joao@exemplo.com
        login:
          type: string
          example: joaosilva123
        password:
          type: string
          format: password
          example: MyPassword123!
          description: Senha do usuário (não retornada nas consultas)
        address:
          $ref: '#/components/schemas/Address'
        role:
          $ref: '#/components/schemas/UserRole'
        active:
          type: boolean
          example: true

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Identificador único (gerado automaticamente)
        name:
          type: string
          example: João Silva
        email:
          type: string
          format: email
          example: joao@exemplo.com
        login:
          type: string
          example: joaosilva123
        address:
          $ref: '#/components/schemas/Address'
        role:
          $ref: '#/components/schemas/UserRole'
        active:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    Address:
      type: object
      required:
        - publicPlace
        - number
        - city
        - state
        - postalCode
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Identificador único do endereço
        publicPlace:
          type: string
          example: Rua das Flores, 123
        number:
          type: string
          example: 123
        complement:
          type: string
          example: Apartamento 45
        neighborhood:
          type: string
          example: Centro
        city:
          type: string
          example: São Paulo
        state:
          type: string
          example: SP
        postalCode:
          type: string
          example: 01001-000
        country:
          type: string
          example: Brasil
        latitude:
          type: number
          format: double
          example: -23.55052
        longitude:
          type: number
          format: double
          example: -46.633308
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    UserRole:
      type: string
      description: Papel do usuário no sistema
      enum:
        - OWNER
        - CUSTOMER